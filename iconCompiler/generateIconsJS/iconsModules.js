const { parse } = require('svg-parser')
const { createComponentName, convertPxToRem } = require('../utils/tools')

const fileHeader = `/*
DON'T EDIT THIS FILE
It was auto-generated by "iconCompiler" script
*/`

function generatePaths(arr, iconName) {
  const objectToReturn = arr.map(
    (elem) => `{${generateTagObject(elem, iconName)}}`
  )
  return `[${objectToReturn}]`
}

function generateTagObject(obj, iconName) {
  let objString = ''
  let tagObj = {}
  const filename = iconName.toLowerCase()
  const tagName = obj.tagName
  const properties = obj.properties
  const children = obj.children
  const hasProperties = Object.keys(properties).length !== 0
  const hasChildren = children.length > 0

  if (tagName) tagObj.tagName = tagName

  if (hasProperties) {
    const customFillId = `fill-${filename}`

    if (
      tagName === 'path' &&
      properties.fill &&
      properties.fill.includes('url')
    ) {
      properties.fill = `url(#${customFillId})`
    }
    if (properties.id && tagName === 'linearGradient') {
      properties.id = customFillId
    }

    tagObj.attrs = JSON.stringify(properties)
  }

  if (hasChildren) tagObj.children = generatePaths(children, iconName)

  for (const key in tagObj) {
    const value = tagObj[key]
    objString += key === 'tagName' ? `${key}: "${value}",` : `${key}: ${value},`
  }

  objString = objString.substring(0, objString.length - 1)

  return objString
}

const iconModule = ({ fileName, data }) => {
  const iconName = createComponentName(fileName)
  const type = fileName.replace('.svg', '').split('_').shift().toLowerCase()
  const sizePx = fileName.replace('.svg', '').split('_').pop()
  const sizeRem = convertPxToRem(sizePx.replace('px', ''))
  const parsedSVG = parse(data).children[0]
  const viewBox = parsedSVG.properties.viewBox
  const content = parsedSVG.children

  if (!sizeRem || !content || content.length === 0) {
    console.error(
      `âœ— ERROR : there was a problem when transforming the ${fileName} file into a JS module`
    )

    return null
  }

  return `export const ${iconName} = {
    viewBox: "${viewBox}",
    size: "${sizeRem}",
    paths: ${generatePaths(content, iconName)},
    type: "${type}"
  };`
}

const iconsModules = (iconList) => `${fileHeader}

${iconList.map(iconModule).join('\n')}`

module.exports = iconsModules
