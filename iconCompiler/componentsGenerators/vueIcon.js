const { parse } = require('svg-parser')
const { createComponentName, convertPxToRem } = require('../utils/tools')

const fileHeader = `/*
DON'T EDIT THIS FILE
It was auto-generated by "iconCompiler" script
*/

const GenerateIcon = (size, viewBox, childs) => ({
  props: {
    size: {
      type: String,
      default: size,
    },
    fill: {
      type: String,
      default: 'currentColor',
    },
  },
  render: function (createElement) {
    return createElement(
      attrs: {
        height: this.size,
        width: this.size,
        fill: this.fill,
        viewBox: viewBox
      },
      childs.map(elem => createElement(...elem))
    );
  },
});
`

const vueIconComponent = ({ fileName, data }) => {
  const parsedFileName = `MIcon${createComponentName(fileName)}`

  const sizePx = fileName
    .replace('.svg', '')
    .split('_')
    .pop()

  const size = convertPxToRem(sizePx.replace('px', ''))
  const parsedSVG = parse(data)
  const viewBox = parsedSVG.children[0].properties.viewBox

  const content = parsedSVG.children[0].children

  if (!size || !viewBox || !content || content.length === 0) {
    console.error(
      `âœ— ERROR : there was a problem building ${fileName} for vueJS`
    )

    return null
  }

  return `

export const ${parsedFileName} = GenerateIcon('${size}', '${viewBox}', [
  ${content.map(
    elem => `[
    '${elem.tagName}',
    { attrs: ${JSON.stringify(elem.properties)} },
  ]`
  )}
])`
}

const vueIconsIndex = iconList => `<script>
${fileHeader}
${iconList.map(vueIconComponent).join('')}

export default {}
</script>`

module.exports = vueIconsIndex
