@use "sass:math";

/* mqp:start */
.mc-text-input {
  @include reset-input();
  @include set-input-size($input-default-size);
  @include set-focus-transition();

  display: block;
  width: 100%;
  position: relative;
  border: get-border("s") solid $color-input-border;
  color: $color-input-text;
  background-color: $color-input-background;
  border-radius: get-border-radius("m");

  &::placeholder {
    margin: 0;
    color: $color-input-placeholder;
    opacity: 1;
  }

  &.is-valid,
  &.is-invalid {
    background-repeat: no-repeat;
    background-size: $mu150 $mu150;
    background-position: right math.div($mu175, 4) center; // right 7px center
    padding-right: $mu250;
  }

  &.is-valid {
    border-color: $color-input-valid-border;
    background-image: url("#{inline-icons('notification-circle-available-24', $color-input-valid-border)}");

    &:hover,
    &.is-hover {
      border-color: $color-input-valid-hover-border;
    }
  }

  &.is-invalid {
    border-color: $color-input-invalid-border;
    background-image: url("#{inline-icons('notification-warning-24', $color-input-invalid-border)}");

    &:hover,
    &.is-hover {
      border-color: $color-input-invalid-hover-border;
    }
  }

  &:hover {
    border-color: $color-input-hover-border;
  }

  &:focus {
    @include set-shadow-focus();
  }

  &:disabled {
    background: $color-input-disabled-background;
    border-color: $color-input-disabled-border;
    color: $color-input-placeholder;
    cursor: not-allowed;
  }

  @each $size, $props in $input-sizes {
    &--#{$size} {
      @include modify-from-screens($major-screens) {
        @include set-input-size($props);
      }
    }
  }
}

/* mqp:end */
