/* mqp:start */
.mc-text-input {
  @include reset-input;
  @include set-input-size($input-default-size);

  display: block;
  width: 100%;
  position: relative;
  border: get-border('s') solid $color-input-border;
  color: $color-input-text;
  background-color: $color-input-background;
  border-radius: get-border-radius('m');

  &::placeholder {
    margin: 0;
    color: $color-input-placeholder;
    opacity: 1;
  }

  &.is-valid,
  &.is-invalid {
    background-repeat: no-repeat;
    background-size: $mu100 $mu100;
    background-position: right $mu050 center;
    padding-right: $mu250;
  }

  &.is-valid {
    border-color: $color-input-valid-border;
    background-image:
      url(
        inline-icons(
          'checkmark-16',
          $color-input-valid-border
        ));

    &:hover:not(:focus),
    &.is-hover:not(:focus) {
      border-color: $color-input-valid-hover-border;
    }
  }

  &.is-invalid {
    border-color: $color-input-invalid-border;
    background-image:
      url(
        inline-icons(
          'cross-16',
          $color-input-invalid-border
        ));

    &:hover:not(:focus),
    &.is-hover:not(:focus) {
      border-color: $color-input-invalid-hover-border;
    }
  }

  &:hover {
    @include add-demo-state-class {
      border-color: $color-input-hover-border;
    }
  }

  &:focus {
    @include add-demo-state-class {
      border-color: $color-input-focus-border;
    }
  }

  &:disabled {
    border-color: $color-input-disabled-border;
    background: $color-input-disabled-background;
    cursor: not-allowed;
  }

  @each $size, $props in $input-sizes {
    &--#{$size} {
      @include modify-from-screens($major-screens) {
        @include set-input-size($props);
      }
    }
  }
}

/* mqp:end */
