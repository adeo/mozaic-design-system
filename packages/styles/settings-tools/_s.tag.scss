$tag-themes: get-token(color, tag);
$tag-border: get-border("s");
$tag-border-focus: get-border("m");
$padding-y--s: px-to-rem(3);
$padding-y--m: px-to-rem(11);

$tag-sizes: (
  "s": (
    "padding": $padding-y--s $mu100,
    "font-size": "04",
    "line-height": "m",
    "border-radius": $mu075,
  ),
  "m": (
    "padding": $padding-y--m $mu150,
    "font-size": "04",
    "line-height": "m",
    "border-radius": $mu125,
  ),
);

@mixin set-tag-size($size) {
  $props: map-get($tag-sizes, $size);

  @include set-font-scale(
    map-get($props, "font-size"),
    map-get($props, "line-height")
  );

  border-radius: map-get($props, "border-radius");
  padding: map-get($props, "padding");

  @include set-focus-floating-base() {
    border-radius: (map-get($props, "border-radius") + $size-focus-gap);
    top: -$size-focus-gap;
    right: -$size-focus-gap;
    bottom: -$size-focus-gap;
    left: -$size-focus-gap;
  }
}

@mixin set-tag-base-style($size) {
  @include set-tag-size($size);

  display: inline-flex;
}

@mixin set-tag-removable-icon($size) {
  @if $size == "s" {
    width: $mu150;
    height: $mu150;
    background-size: $mu100;
  }

  @if $size == "m" {
    width: $mu250;
    height: $mu250;
    background-size: $mu150;
  }
}

@mixin set-tag-icon-base64($theme: "light") {
  @if $theme == "light" {
    background-image: url("#{inline-icons('tag-delete-24', $color-tag-removable-light-icon)}");
  }

  @if $theme == "dark" {
    background-image: url("#{inline-icons('tag-delete-24', $color-tag-removable-dark-icon)}");
  }
}
